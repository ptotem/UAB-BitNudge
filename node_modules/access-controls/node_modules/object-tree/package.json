{
  "name": "object-tree",
  "version": "0.2.5",
  "description": "lookup js objects values from a flat structure",
  "main": "index.js",
  "scripts": {
    "test": "mocha test --reporter spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nherment/node-object-tree.git"
  },
  "keywords": [
    "tree",
    "object",
    "lookup"
  ],
  "author": {
    "name": "Nicolas Herment",
    "email": "nherment@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nherment/node-object-tree/issues"
  },
  "homepage": "https://github.com/nherment/node-object-tree",
  "dependencies": {
    "lodash": "2.4.1"
  },
  "devDependencies": {
    "mocha": "1.17.1"
  },
  "readme": "\n[![Build Status](https://api.travis-ci.org/nherment/node-object-tree.png?branch=master)](https://travis-ci.org/nherment/node-object-tree)\n\n\n```npm install --save object-tree```\n\n# value lookup\n\n### string\n\n    var data = {\n      food: {\n        caramel: {\n          tastes: {\n            chocolate: 1.234\n          }\n        }\n      }\n    }\n\n    var ot = new ObjectTree()\n\n    var actual = ot.lookup('food.caramel.tastes.chocolate', data)\n    console.log(actual) // 1.234\n\n### string with custom separator\n\n    var data = {\n      food: {\n        caramel: {\n          tastes: {\n            chocolate: 1.234\n          }\n        }\n      }\n    }\n\n    var ot = new ObjectTree({seperator: '::'})\n\n    var actual = ot.lookup('food::caramel::tastes::chocolate', data)\n    console.log(actual) // 1.234\n\n\n### array\n\n    var data = {\n      food: {\n        caramel: {\n          tastes: {\n            chocolate: 1.234\n          }\n        }\n      }\n    }\n\n    var ot = new ObjectTree()\n\n    var actual = ot.lookup(['food','caramel','tastes','chocolate','smells','code'], data)\n    console.log(actual) // 1.234\n\n### filter\n\n    var data = {\n      food: {\n        caramel: {\n          tastes: {\n            chocolate: 1.234\n          }\n        }\n      }\n    }\n\n    var ot = new ObjectTree()\n\n    var actual = ot.lookup({'food':'caramel','tastes':'chocolate'}, data)\n    console.log(actual) // 1.234\n\n### filter with wildcard\n\n    var data = {\n      food: {\n        caramel: {\n          tastes: {\n            '*': 444,\n            chocolate: 1.234\n          }\n        }\n      }\n    }\n\n    var ot = new ObjectTree({\n      wildcard: '*'\n    })\n\n    var actual = ot.lookup({'food':'caramel','tastes':'flower'}, data)\n    console.log(actual) // 444\n\n### template only\n\n    var ot = new ObjectTree()\n\n    var actual = ot.lookupTemplate('{food.caramel.tastes.chocolate}', {\n        food: {\n          'caramel': {\n            tastes: {\n              'chocolate': 1.234\n            }\n          }\n        }\n      }\n    )\n\n    assert.equal(actual, 1.234)\n\n### template with custom delimiter\n\n    var ot = new ObjectTree({\n      template: {\n        left: '<',\n        right: '>'\n      }\n    })\n\n    var actual = ot.lookupTemplate('<food.caramel.tastes.chocolate>', {\n        food: {\n          'caramel': {\n            tastes: {\n              'chocolate': 1.234\n            }\n          }\n        }\n      }\n    )\n\n    assert.equal(actual, 1.234)\n\n# reverse lookup (generate a tree)\n\n### generate filters from the tree\n\n    var tree = {\n      the: {\n        barn: {\n          '*': 0,\n          is: {\n            free: 1\n          }\n        },\n        food: {\n          is: {\n            tasty: 2\n          }\n        }\n      }\n    }\n\n    var ot = new ObjectTree({wildcard: '*'})\n\n    var eventBus = ot.generateFilters(tree)\n\n    eventBus.on('filter', function(value, filter, attrList) {\n      will be called 3 times:\n      // value=0, filter={the: 'barn'}, attrList=['the', 'barn']\n      // value=1, filter={the: 'barn', is: 'free'}, attrList=['the', 'barn', 'is', 'free']\n      // value=2, filter={the: 'food', is: 'tasty'}, attrList=['the', 'food', 'is', 'tasty']\n    })\n    eventBus.on('end', function() {\n      // no more 'filter' events\n    })\n\n# set value\n\n    var obj = {attr1: false, attr2: true}\n\n    ot.set('attr2.nested1.nested2', Date.now(), obj)) // true\n\nset returns true if the object was modified\n",
  "readmeFilename": "README.md",
  "_id": "object-tree@0.2.5",
  "dist": {
    "shasum": "9b87a60451b4f9a0325df0bc2c86781cf2484811"
  },
  "_from": "object-tree@0.2.5",
  "_resolved": "https://registry.npmjs.org/object-tree/-/object-tree-0.2.5.tgz"
}
